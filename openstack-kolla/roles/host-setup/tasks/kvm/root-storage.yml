---

# Extent root lv size to max capacity, by adding vdb in existing vg

- name: Get device of / mountpoint
  shell: findmnt /|egrep "^/\s+"|awk '{print $2}'
  register: _root_device

- debug:
    var: _root_device.stdout

- name: Set fact disk found for {{disk_for_root_path}}
  set_fact:
    disk_found: true
  with_items: "{{ansible_devices}}"
  when: item is search(disk_for_root)

- block:
  - name: Get VG name of {{_root_device.stdout}}
    shell: lvdisplay {{_root_device.stdout}}|awk '/VG Name/{print $3}'
    register: _vg

  - name: Get LV name of {{_root_device.stdout}}
    shell: lvdisplay {{_root_device.stdout}}|awk '/LV Name/{print $3}'
    register: _lv

  - debug:
      msg: "{{disk_for_root_path}} is not a PV"
    when: ansible_lvm.pvs[disk_for_root_path] is not defined

  - debug:
      msg: "vdb already initialized as pv"
    when: ansible_lvm.pvs[disk_for_root_path] is defined

  - debug:
      msg:
        - "vdb is not used by root lv VG"
        - "ansible_devices.vdb.holders: {{ansible_devices.{{disk_for_root}}.holders}}"
    when: ansible_lvm.pvs[disk_for_root_path] is defined and ansible_lvm.pvs[disk_for_root_path].vg is not match(_vg.stdout)

  - name: Create PV using {{disk_for_root_path}}
    command: vgextend {{_vg.stdout}} {{disk_for_root_path}}
    when: ansible_lvm.pvs[disk_for_root_path] is not defined

  - name: Increase {{_root_device.stdout}} LV size to max
    lvol:
      vg: "{{_vg.stdout}}"
      lv: "{{_lv.stdout}}"
      resizefs: yes
      size: +100%FREE
    when:
      - ansible_lvm.pvs[disk_for_root_path].vg is match(_vg.stdout)
      - ansible_lvm.pvs[disk_for_root_path].free_g|int > 0
  when: disk_found is defined and disk_found|bool
